extends: spectral:oas
rules:
  oas3-unused-components-schema: off
  tag-description: off
  oas3-api-servers: off
  openapi-tags: off
  info-description: off
  schema-names-pascal-case:
    description: Schema names MUST be written in PascalCase
    message: '{{property}} is niet PascalCase: {{error}}'
    recommended: true
    type: style
    given: '$.components.schemas.*~'
    then:
      function: casing
      functionOptions:
        type: pascal
  property-of-object-type:
    description: Properties MUST not be of object type
    message: '{{path}} is gedefinieerd als een inline object. Definieer deze als een schema component en verwijs hiernaar met $ref'
    type: style
    resolved: false
    given: '$.components.schemas..properties[*].properties'
    then:
      function: falsy
  parameter-names-camel-case:
    description: Parameter names MUST be written in camelCase
    message: '{{value}} is niet camelCase: {{error}}'
    recommended: true
    type: style
    given: '$.components.parameters[?(@.in == "query")]'
    then:
      field: name
      function: casing
      functionOptions:
        type: camel
  enum-value-snake-case:
    description: Enumeration values SHOULD be in snake case
    message: 'Enumeratiewaarde "{{value}}" is niet snake_case: {{path}}'
    recommended: true
    resolved: false
    type: style
    given: '$.components.schemas..enum[*]'
    then:
      function: casing
      functionOptions:
        type: snake
  allof-extends-object:
    description: allOf must extend an object and add at least one property
    message: '{{path}} moet beginnen met $ref'
    resolved: false
    type: style
    given: '$..allOf[0]'
    then:
      - field: "$ref"
        function: truthy
  allof-adds-property:
    description: allOf must extend an object and add at least one property
    message: '{{path}}: het tweede item in een allOf moet ten minste één property toevoegen'
    resolved: false
    type: style
    given: '$..allOf[1]'
    then:
     - field: "properties"
       function: truthy
  allof-single-extension:
    description: allOf must extend from exactly one object
    message: '{{path}}: allOf mag niet meer dan twee items bevatten, de eerste met $ref, de tweede met properties'
    resolved: false
    type: style
    given: '$..allOf[2]'
    then:
      function: falsy
  too-much-information:
    description: properties of GET responses should not use pattern, minimum, maximum, minLength, maxLength, minItems or required
    resolved: false
    type: style
    message: 'Gebruik geen {{property}} in response definitie: {{path}}'
    given: '$.components.schemas..properties[*]'
    then:
      - field: "minItems"
        function: falsy

      - field: "maxItems"
        function: falsy

      - field: "maxLength"
        function: falsy

      - field: "maxLength"
        function: falsy

      - field: "minimum"
        function: falsy

      - field: "maximum"
        function: falsy

      - field: "required"
        function: falsy

      - field: "pattern"
        function: falsy